/*
 Erica Sadun, http://ericasadun.com
 iPhone Developer's Cookbook 3.x and beyond
 BSD License, Use at your own risk
 */

/*
 #import <humor.h> : Not planning to implement: dateByAskingBoyOut and dateByGettingBabysitter
 ----
 General Thanks: sstreza, Scott Lawrence, Kevin Ballard, NoOneButMe, Avi`, August Joki. Emanuele Vulcano, jcromartiej, Blagovest Dachev, Matthias Plappert,  Slava Bushtruk, Ali Servet Donmez, Ricardo1980, pip8786, Danny Thuerin, Dennis Madsen
*/

#import "NSDate-Utilities.h"

#define DATE_COMPONENTS (NSYearCalendarUnit| NSMonthCalendarUnit | NSDayCalendarUnit | NSWeekCalendarUnit |  NSHourCalendarUnit | NSMinuteCalendarUnit | NSSecondCalendarUnit | NSWeekdayCalendarUnit | NSWeekdayOrdinalCalendarUnit)
#define CURRENT_CALENDAR [NSCalendar currentCalendar]

@implementation NSDate (Utilities)

+ (NSDate *) systemTimeZoneDate{
    NSDate  *date = [NSDate date];
    NSTimeZone *zone = [NSTimeZone systemTimeZone];
    NSInteger interval = [zone secondsFromGMTForDate: date];
    return [date dateByAddingTimeInterval:interval];
}


#pragma mark Relative Dates

+ (NSDate *) dateWithDaysFromNow: (NSInteger) days
{
    // Thanks, Jim Morrison
	return [[NSDate date] dateByAddingDays:days];
}

+ (NSDate *) dateWithDaysBeforeNow: (NSInteger) days
{
    // Thanks, Jim Morrison
	return [[NSDate date] dateBySubtractingDays:days];
}

+ (NSDate *) dateTomorrow
{
	return [NSDate dateWithDaysFromNow:1];
}

+ (NSDate *) dateYesterday
{
	return [NSDate dateWithDaysBeforeNow:1];
}

+ (NSDate *)beginingOfDay:(NSDate *)date
{
    NSCalendar *cal = [NSCalendar currentCalendar];
    NSDateComponents *components = [cal components:(NSDayCalendarUnit | NSMonthCalendarUnit | NSYearCalendarUnit | NSHourCalendarUnit | NSMinuteCalendarUnit | NSSecondCalendarUnit ) fromDate:date];
    [components setHour:0];
    [components setMinute:0];
    [components setSecond:0];
    
    return [cal dateFromComponents:components];
}


+ (NSDate *) dateWithHoursFromNow: (NSInteger) dHours
{
	NSTimeInterval aTimeInterval = [[NSDate date] timeIntervalSinceReferenceDate] + D_HOUR * dHours;
	NSDate *newDate = [NSDate dateWithTimeIntervalSinceReferenceDate:aTimeInterval];
	return newDate;	
}

+ (NSDate *) dateWithHoursBeforeNow: (NSInteger) dHours
{
	NSTimeInterval aTimeInterval = [[NSDate date] timeIntervalSinceReferenceDate] - D_HOUR * dHours;
	NSDate *newDate = [NSDate dateWithTimeIntervalSinceReferenceDate:aTimeInterval];
	return newDate;	
}

+ (NSDate *) dateWithMinutesFromNow: (NSInteger) dMinutes
{
	NSTimeInterval aTimeInterval = [[NSDate date] timeIntervalSinceReferenceDate] + D_MINUTE * dMinutes;
	NSDate *newDate = [NSDate dateWithTimeIntervalSinceReferenceDate:aTimeInterval];
	return newDate;		
}

+ (NSDate *) dateWithMinutesBeforeNow: (NSInteger) dMinutes
{
	NSTimeInterval aTimeInterval = [[NSDate date] timeIntervalSinceReferenceDate] - D_MINUTE * dMinutes;
	NSDate *newDate = [NSDate dateWithTimeIntervalSinceReferenceDate:aTimeInterval];
	return newDate;		
}

#pragma mark Comparing Dates

- (BOOL) isEqualToDateIgnoringTime: (NSDate *) aDate
{
	NSDateComponents *components1 = [CURRENT_CALENDAR components:DATE_COMPONENTS fromDate:self];
	NSDateComponents *components2 = [CURRENT_CALENDAR components:DATE_COMPONENTS fromDate:aDate];
    
	return ((components1.year == components2.year) &&
			(components1.month == components2.month) && 
			(components1.day == components2.day));
}

- (BOOL) isTodayAsYear:(NSInteger)year month:(NSInteger)month day:(NSInteger)day
{
    NSDateComponents *components1 = [CURRENT_CALENDAR components:DATE_COMPONENTS fromDate:self];
    return ((components1.year == year)
            && (components1.month == month)
            && (components1.day == day));

}

- (BOOL) isBirthdayAsMonth:(NSInteger)month day:(NSInteger)day
{
    NSDateComponents *components1 = [CURRENT_CALENDAR components:DATE_COMPONENTS fromDate:self];
    return ((components1.month == month)
            && (components1.day == day));
}

- (BOOL) isChristmasDay
{
    NSDateComponents *components1 = [CURRENT_CALENDAR components:DATE_COMPONENTS fromDate:self];
    return ((components1.month == 12) && (components1.day == 25));

}

- (BOOL) isJoinJoggerAnniversary:(NSString *)timeInterval
{
    NSDate *addDate = [NSDate dateWithTimeIntervalSince1970:[timeInterval floatValue]];
    NSDate *nowDate = [NSDate date];
    if (addDate && nowDate) {
        if ((nowDate.year - addDate.year == 1) && (addDate.month == nowDate.month) && (addDate.day == nowDate.day))
        {
            return YES;
        }
    }
    return NO;
}

- (BOOL) isToday
{
	return [self isEqualToDateIgnoringTime:[NSDate date]];
}

- (BOOL) isTomorrow
{
	return [self isEqualToDateIgnoringTime:[NSDate dateTomorrow]];
}

- (BOOL) isYesterday
{
	return [self isEqualToDateIgnoringTime:[NSDate dateYesterday]];
}

// This hard codes the assumption that a week is 7 days
- (BOOL) isSameWeekAsDate: (NSDate *) aDate
{
	NSDateComponents *components1 = [CURRENT_CALENDAR components:DATE_COMPONENTS fromDate:self];
	NSDateComponents *components2 = [CURRENT_CALENDAR components:DATE_COMPONENTS fromDate:aDate];
	
	// Must be same week. 12/31 and 1/1 will both be week "1" if they are in the same week
//	if (components1.week != components2.week) return NO;
    if (components1.weekOfYear != components2.weekOfYear) return NO;
	
	// Must have a time interval under 1 week. Thanks @aclark
	return (abs((int)([self timeIntervalSinceDate:aDate])) < D_WEEK);
}

- (BOOL) isThisWeek
{
	return [self isSameWeekAsDate:[NSDate date]];
}

- (BOOL) isNextWeek
{
	NSTimeInterval aTimeInterval = [[NSDate date] timeIntervalSinceReferenceDate] + D_WEEK;
	NSDate *newDate = [NSDate dateWithTimeIntervalSinceReferenceDate:aTimeInterval];
	return [self isSameWeekAsDate:newDate];
}

- (BOOL) isLastWeek
{
	NSTimeInterval aTimeInterval = [[NSDate date] timeIntervalSinceReferenceDate] - D_WEEK;
	NSDate *newDate = [NSDate dateWithTimeIntervalSinceReferenceDate:aTimeInterval];
	return [self isSameWeekAsDate:newDate];
}

// Thanks, mspasov
- (BOOL) isSameMonthAsDate: (NSDate *) aDate
{
    NSDateComponents *components1 = [CURRENT_CALENDAR components:NSYearCalendarUnit | NSMonthCalendarUnit fromDate:self];
    NSDateComponents *components2 = [CURRENT_CALENDAR components:NSYearCalendarUnit | NSMonthCalendarUnit fromDate:aDate];
    return ((components1.month == components2.month) &&
            (components1.year == components2.year));
}

- (BOOL) isThisMonth
{
    return [self isSameMonthAsDate:[NSDate date]];
}

- (BOOL) isSameYearAsDate: (NSDate *) aDate
{
	NSDateComponents *components1 = [CURRENT_CALENDAR components:NSYearCalendarUnit fromDate:self];
	NSDateComponents *components2 = [CURRENT_CALENDAR components:NSYearCalendarUnit fromDate:aDate];
	return (components1.year == components2.year);
}

- (BOOL) isThisYear
{
    // Thanks, baspellis
	return [self isSameYearAsDate:[NSDate date]];
}

- (BOOL) isNextYear
{
	NSDateComponents *components1 = [CURRENT_CALENDAR components:NSYearCalendarUnit fromDate:self];
	NSDateComponents *components2 = [CURRENT_CALENDAR components:NSYearCalendarUnit fromDate:[NSDate date]];
	
	return (components1.year == (components2.year + 1));
}

- (BOOL) isLastYear
{
	NSDateComponents *components1 = [CURRENT_CALENDAR components:NSYearCalendarUnit fromDate:self];
	NSDateComponents *components2 = [CURRENT_CALENDAR components:NSYearCalendarUnit fromDate:[NSDate date]];
	
	return (components1.year == (components2.year - 1));
}

- (BOOL) isEarlierThanDate: (NSDate *) aDate
{
	return ([self compare:aDate] == NSOrderedAscending);
}

- (BOOL) isLaterThanDate: (NSDate *) aDate
{
	return ([self compare:aDate] == NSOrderedDescending);
}

- (BOOL)laterThanOtherDay:(NSDate *)otherDay
{
    if (self.year > otherDay.year) {
        return YES;
    }
    else if (self.year == otherDay.year)
    {
        if (self.month > otherDay.month) {
            return YES;
        }
        else if (self.month == otherDay.month)
        {
            if (self.day > otherDay.day) {
                return YES;
            }
            return NO;
        }
        else
            return NO;
    }
    return NO;
}

- (BOOL)equalToOtherDay:(NSDate *)otherDay
{
    return (self.year == otherDay.year) && (self.month == otherDay.month) && (self.day == otherDay.day);
}

- (BOOL)earlierThanOtherDay:(NSDate *)otherDay
{
    return ![self laterThanOtherDay:otherDay] && ![self equalToOtherDay:otherDay];
}

// Thanks, markrickert
- (BOOL) isInFuture
{
    return ([self isLaterThanDate:[NSDate date]]);
}

// Thanks, markrickert
- (BOOL) isInPast
{
    return ([self isEarlierThanDate:[NSDate date]]);
}


#pragma mark Roles
- (BOOL) isTypicallyWeekend
{
    NSDateComponents *components = [CURRENT_CALENDAR components:NSWeekdayCalendarUnit fromDate:self];
    if ((components.weekday == 1) ||
        (components.weekday == 7))
        return YES;
    return NO;
}

- (BOOL) isTypicallyWorkday
{
    return ![self isTypicallyWeekend];
}

/*
 *@desc:    获取以前的日期(second为相距秒)
 *@parm:    date:NSDate格式的数据, strFormatter:专程目标格式(如:yyyy-mm-dd, yyyymmdd)
 *@return:  返回转换后的字符串
 *             lastest Modify By Zt 2012-7-23
 */
+(NSDate *)getDateFromDate:(NSDate *)date withIntervalSecond:(int)second
{
    NSDateComponents *comps = [[NSDateComponents alloc] init];
    [comps setSecond:second];
    NSCalendar *calender = [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];
    NSDate *mDate = [calender dateByAddingComponents:comps toDate:date options:0];
    return mDate;
}

// 这里加条件
//        a)	1分钟内，显示格式：刚刚
//        b)    1-60分钟内，显示格式：XX分钟前
//        c)	1-24小时内，显示格式：XX小时前
//        d)	1-7天（含第7天）内，显示格式：XX天前
//        e)	访问的第7天后，显示格式：MM-DD HH:mm
//        f)	如访问时间跨年，显示格式：YY-MM-DD HH:mm，例如：2012年年底访问12-28，2013年看到访客列表显示：2012-12-28

/*
    2.8.0跑友秀的帖子时间显示规则
    a)<=30分钟,显示格式：刚刚
    b)30-60分钟，显示格式：半小时前
    c)1-2h,显示格式：1小时前，以此类推
    d)1-2d(天)，显示格式：1天前
    e)7-14d，显示格式：一周前
    f)30-60d,显示格式：一个月前
    g)大于365天，显示格式：一年前
    以此类推
 
 */
+ (NSString *)communtySstringFromString:(NSString *)timeString timeformatter:(NSString *)timeformatter nowDate:(NSDate *)nowDate  {
    NSString *resultString = nil;
    
    NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init];
    [dateFormat setDateFormat:timeformatter];
    NSDate *timeDate = [dateFormat dateFromString:timeString];
    
    
    NSTimeInterval distance =  [timeDate timeIntervalSinceDate:nowDate];
    if(distance <0){
        distance = -distance;
    }
    if(distance <60*30)//半小时
    {
        resultString = @"刚刚";
    }
    else if(distance < 60 * 60)//1h
    {
        resultString = @"1小时前";
    }
    else if(distance < 60 * 60 * 24)//24h
    {
        int hour =  distance / (60 * 60);
        resultString =[NSString stringWithFormat:@"%d小时前",hour];
    }else if(distance < 60 * 60 * 24 * 2)//2day
    {
        resultString = @"1天前";
    }
    else if(distance < 60 * 60 * 24 * 7)
    {
        int hour =  distance / (60 * 60 * 24);
        resultString = [NSString stringWithFormat:@"%d天前",hour];
    }else if(distance < 60 * 60 * 24 * 14)
    {
        resultString = @"1周前";
    }
    else if(distance < 60 * 60 * 24 * 30)
    {
        int hour =  distance / (60 * 60 * 24*7);
        resultString = [NSString stringWithFormat:@"%d周前",hour];
    }
    else if(distance < 60 * 60 * 24 * 60)
    {
        resultString = @"1个月前";
    }
    else if(distance < 60 * 60 * 24 * 365)
    {
        int hour =  distance / (60 * 60 * 24*30);
        resultString = [NSString stringWithFormat:@"%d个月前",hour];
    }
    else
    {
        int year=distance/(60 * 60 * 24*365);
        resultString = [NSString stringWithFormat:@"%d年前",year];
    }
    return resultString;
}

+ (NSString *)stringFromString:(NSString *)timeString timeformatter:(NSString *)timeformatter nowDate:(NSDate *)nowDate
{
    NSString *resultString = nil;
    
    NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init];
    [dateFormat setDateFormat:timeformatter];
    NSDate *timeDate = [dateFormat dateFromString:timeString];
    
    
    NSTimeInterval distance =  [timeDate timeIntervalSinceDate:nowDate];
    if(distance <0)
        distance = -distance;
    
    if(distance < 60)
    {
        resultString = @"刚刚";
    }
    else if(distance < 60 * 60)
    {
        int min =  distance / 60;
        resultString = [NSString stringWithFormat:@"%d分钟前",min];
    }
    else if(distance < 60 * 60 * 24)
    {
        int hour =  distance / (60 * 60);
        resultString =[NSString stringWithFormat:@"%d小时前",hour];
    }
    else if(distance < 60 * 60 * 24 * 7)
    {
        int hour =  distance / (60 * 60 * 24);
        resultString = [NSString stringWithFormat:@"%d天前",hour];
    }
    else
    {
        NSDateComponents *components1 = [[NSCalendar currentCalendar] components:NSDayCalendarUnit | NSMonthCalendarUnit | NSYearCalendarUnit fromDate:timeDate];
        NSInteger year= [components1 year];
        
        
        NSDateComponents *components2 = [[NSCalendar currentCalendar] components:NSDayCalendarUnit | NSMonthCalendarUnit | NSYearCalendarUnit fromDate:nowDate];
        NSInteger nowyear= [components2 year];
    
        
        if(year == nowyear)
        {
            NSDateFormatter *formatter=[[NSDateFormatter alloc] init];
            [formatter setDateFormat:@"MM-dd HH:mm"];
            resultString =[formatter stringFromDate:timeDate];
        }
        else
        {
            NSDateFormatter *formatter=[[NSDateFormatter alloc] init];
            [formatter setDateFormat:@"yyyy-MM-dd HH:mm"];
            resultString = [formatter stringFromDate:timeDate];
        }
    }
    return resultString;
}

- (NSString *)dateStringFromDate:(NSDate *)date{
    NSTimeInterval intervalTillNow = [date timeIntervalSinceDate:self];
    NSInteger interval = intervalTillNow;
    NSInteger day = interval / D_DAY;
    NSInteger hour = interval % D_DAY / D_HOUR;
    NSInteger minute = interval % D_HOUR / D_MINUTE;
    return [NSString stringWithFormat:@"%ld天%ld时%ld分",(long)day,(long)hour,(long)minute];
}

#pragma mark Adjusting Dates

- (NSDate *) dateByAddingDays: (NSInteger) dDays
{
	NSTimeInterval aTimeInterval = [self timeIntervalSinceReferenceDate] + D_DAY * dDays;
	NSDate *newDate = [NSDate dateWithTimeIntervalSinceReferenceDate:aTimeInterval];
	return newDate;		
}

- (NSDate *) dateBySubtractingDays: (NSInteger) dDays
{
	return [self dateByAddingDays: (dDays * -1)];
}

- (NSDate *) dateByAddingHours: (NSInteger) dHours
{
	NSTimeInterval aTimeInterval = [self timeIntervalSinceReferenceDate] + D_HOUR * dHours;
	NSDate *newDate = [NSDate dateWithTimeIntervalSinceReferenceDate:aTimeInterval];
	return newDate;		
}

- (NSDate *) dateBySubtractingHours: (NSInteger) dHours
{
	return [self dateByAddingHours: (dHours * -1)];
}

- (NSDate *) dateByAddingMinutes: (NSInteger) dMinutes
{
	NSTimeInterval aTimeInterval = [self timeIntervalSinceReferenceDate] + D_MINUTE * dMinutes;
	NSDate *newDate = [NSDate dateWithTimeIntervalSinceReferenceDate:aTimeInterval];
	return newDate;			
}

- (NSDate *) dateBySubtractingMinutes: (NSInteger) dMinutes
{
	return [self dateByAddingMinutes: (dMinutes * -1)];
}

- (NSDate *) dateAtStartOfDay
{
	NSDateComponents *components = [CURRENT_CALENDAR components:DATE_COMPONENTS fromDate:self];
	components.hour = 0;
	components.minute = 0;
	components.second = 0;
	return [CURRENT_CALENDAR dateFromComponents:components];
}

- (NSDateComponents *) componentsWithOffsetFromDate: (NSDate *) aDate
{
	NSDateComponents *dTime = [CURRENT_CALENDAR components:DATE_COMPONENTS fromDate:aDate toDate:self options:0];
	return dTime;
}

#pragma mark Retrieving Intervals

- (NSInteger) minutesAfterDate: (NSDate *) aDate
{
	NSTimeInterval ti = [self timeIntervalSinceDate:aDate];
	return (NSInteger) (ti / D_MINUTE);
}

- (NSInteger) minutesBeforeDate: (NSDate *) aDate
{
	NSTimeInterval ti = [aDate timeIntervalSinceDate:self];
	return (NSInteger) (ti / D_MINUTE);
}

- (NSInteger) quartersAfterDate: (NSDate *) aDate
{
    NSTimeInterval ti = [self timeIntervalSinceDate:aDate];
    return (NSInteger) (ti / D_QUARTER);
}

- (NSInteger) hoursAfterDate: (NSDate *) aDate
{
	NSTimeInterval ti = [self timeIntervalSinceDate:aDate];
	return (NSInteger) (ti / D_HOUR);
}

- (NSInteger) hoursBeforeDate: (NSDate *) aDate
{
	NSTimeInterval ti = [aDate timeIntervalSinceDate:self];
	return (NSInteger) (ti / D_HOUR);
}

- (NSInteger) daysAfterDate: (NSDate *) aDate
{
	NSTimeInterval ti = [self timeIntervalSinceDate:aDate];
	return (NSInteger) (ti / D_DAY);
}

- (NSInteger) daysBeforeDate: (NSDate *) aDate
{
	NSTimeInterval ti = [aDate timeIntervalSinceDate:self];
	return (NSInteger) (ti / D_DAY);
}

// Thanks, dmitrydims
// I have not yet thoroughly tested this
- (NSInteger)distanceInDaysToDate:(NSDate *)anotherDate
{
    NSCalendar *gregorianCalendar = [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];
    NSDateComponents *components = [gregorianCalendar components:NSDayCalendarUnit fromDate:self toDate:anotherDate options:0];
    return components.day;
}

#pragma mark Decomposing Dates

- (NSInteger) nearestHour
{
	NSTimeInterval aTimeInterval = [[NSDate date] timeIntervalSinceReferenceDate] + D_MINUTE * 30;
	NSDate *newDate = [NSDate dateWithTimeIntervalSinceReferenceDate:aTimeInterval];
	NSDateComponents *components = [CURRENT_CALENDAR components:NSHourCalendarUnit fromDate:newDate];
	return components.hour;
}

- (NSInteger) hour
{
	NSDateComponents *components = [CURRENT_CALENDAR components:DATE_COMPONENTS fromDate:self];
	return components.hour;
}

- (NSInteger) minute
{
	NSDateComponents *components = [CURRENT_CALENDAR components:DATE_COMPONENTS fromDate:self];
	return components.minute;
}

- (NSInteger) seconds
{
	NSDateComponents *components = [CURRENT_CALENDAR components:DATE_COMPONENTS fromDate:self];
	return components.second;
}

- (NSInteger) day
{
	NSDateComponents *components = [CURRENT_CALENDAR components:DATE_COMPONENTS fromDate:self];
	return components.day;
}

- (NSInteger) month
{
	NSDateComponents *components = [CURRENT_CALENDAR components:DATE_COMPONENTS fromDate:self];
	return components.month;
}

- (NSInteger) week
{
	NSDateComponents *components = [CURRENT_CALENDAR components:DATE_COMPONENTS fromDate:self];
//	return components.week;
    return components.weekOfYear;
}

- (NSInteger)weekOfYear
{
    NSCalendar* cal = [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];
    NSDateComponents *components = [cal components:NSCalendarUnitYear | NSCalendarUnitMonth | NSCalendarUnitWeekOfYear | NSCalendarUnitDay | NSCalendarUnitYearForWeekOfYear fromDate:self];
    
    return components.weekOfYear;

}

- (NSInteger) weekday
{
	NSDateComponents *components = [CURRENT_CALENDAR components:DATE_COMPONENTS fromDate:self];
	return components.weekday;
}

- (NSInteger) nthWeekday // e.g. 2nd Tuesday of the month is 2
{
	NSDateComponents *components = [CURRENT_CALENDAR components:DATE_COMPONENTS fromDate:self];
	return components.weekdayOrdinal;
}

- (NSInteger) year
{
	NSDateComponents *components = [CURRENT_CALENDAR components:DATE_COMPONENTS fromDate:self];
	return components.year;
}

- (NSInteger)yearForWeekOfYear
{
    NSCalendar* cal = [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];
    NSDateComponents *components = [cal components:DATE_COMPONENTS | NSYearForWeekOfYearCalendarUnit fromDate:self];
    return components.yearForWeekOfYear;
}

- (NSInteger)chinaYearForWeekOfYear
{
    NSCalendar* cal = [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];
    cal.firstWeekday = 2;
    cal.minimumDaysInFirstWeek = 7;
    NSDateComponents *components = [cal components:DATE_COMPONENTS | NSYearForWeekOfYearCalendarUnit fromDate:self];
    return components.yearForWeekOfYear;
}

#pragma mark date convert

+ (NSDate *)dateFromString:(NSString *)dateString{
    
    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
    
    [dateFormatter setDateFormat: @"yyyy-MM-dd HH:mm:ss"];
    
    NSDate *destDate= [dateFormatter dateFromString:dateString];
    
    return destDate;
    
}

+ (NSString *)stringFromTimeString:(NSString *)timeString dateFormatterString:(NSString *)dateFormatterString {
    
    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
    NSDate *date = [NSDate dateWithTimeIntervalSince1970:[timeString doubleValue]];
    [dateFormatter setDateFormat: dateFormatterString];
    
    return [dateFormatter stringFromDate:date];
    
}

+ (NSString *)stringFromDate:(NSDate *)date{
    
    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
    
    //zzz表示时区，zzz可以删除，这样返回的日期字符将不包含时区信息 +0000。
    
    [dateFormatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
    
    NSString *destDateString = [dateFormatter stringFromDate:date];
    
    return destDateString;
    
}

+ (NSString *)dayStringFromDate:(NSDate *)date{
    
    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
    
    //zzz表示时区，zzz可以删除，这样返回的日期字符将不包含时区信息 +0000。
    
    [dateFormatter setDateFormat:@"yyyy-MM-dd"];
    
    NSString *destDateString = [dateFormatter stringFromDate:date];
    
    return destDateString;
    
}
+ (NSString *)dotDayStringFromDate:(NSDate *)date{
    
    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
    
    //zzz表示时区，zzz可以删除，这样返回的日期字符将不包含时区信息 +0000。
    
    [dateFormatter setDateFormat:@"yyyy.MM.dd"];
    
    NSString *destDateString = [dateFormatter stringFromDate:date];
    
    return destDateString;
}

+ (NSString *)formatDayStringFromTimeInterval:(NSString *)timeInterval;
{
    
    NSDate *date = [NSDate dateWithTimeIntervalSince1970:[timeInterval doubleValue]];
    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
    //zzz表示时区，zzz可以删除，这样返回的日期字符将不包含时区信息 +0000。
    [dateFormatter setDateFormat:@"yyyy-MM-dd"];
    return [dateFormatter stringFromDate:date];

}

+ (NSString *)hourStringFromDate:(NSDate *)date{
    
    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
    //zzz表示时区，zzz可以删除，这样返回的日期字符将不包含时区信息 +0000。
    [dateFormatter setDateFormat:@"MM-dd HH:mm"];
    
    NSString *destDateString = [dateFormatter stringFromDate:date];
    return destDateString;
    
}

+ (NSString *)dayHourMinuteStringFromTimeInterval:(NSString *)timeInterval;
{
    NSDate *date = [NSDate dateWithTimeIntervalSince1970:[timeInterval doubleValue]];
    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
    [dateFormatter setDateFormat:@"yyyy-MM-dd HH:mm"];
    NSString *destDateString = [dateFormatter stringFromDate:date];
    return destDateString;
}

- (BOOL) isDeepNight;
{
    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
    //zzz表示时区，zzz可以删除，这样返回的日期字符将不包含时区信息 +0000。
    [dateFormatter setDateFormat:@"HH"];
    NSString *destDateString = [dateFormatter stringFromDate:self];
    if ([destDateString integerValue]>22 || [destDateString integerValue]<4) {
        return YES;
    }
    return NO;
}

- (NSInteger)chinaWeek
{
    NSCalendar* cal = [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];
    cal.firstWeekday = 2;
    cal.minimumDaysInFirstWeek = 7;
    NSDateComponents *components = [cal components:NSCalendarUnitYear | NSCalendarUnitMonth | NSCalendarUnitWeekOfYear | NSCalendarUnitDay | NSCalendarUnitYearForWeekOfYear fromDate:self];

    return components.weekOfYear;
}

- (NSInteger)chinaWeekDay
{
    NSInteger weekDay = [self weekday];
    if (weekDay == 1)
    {
        weekDay = 7;
    }
    else
    {
        weekDay--;
    }
    return weekDay;
}

//一年的第几周
- (NSInteger)yearWeek
{
    NSInteger year = [self yearForWeekOfYear];
    NSInteger week = [self weekOfYear];
    
    return [[NSString stringWithFormat:@"%d%02d", (int)year, (int)week] intValue];
}

- (NSInteger)chinaYearWeek
{
    NSInteger year = [self chinaYearForWeekOfYear];
    NSInteger week = [self chinaWeek];
    
    return [[NSString stringWithFormat:@"%d%02d", (int)year, (int)week] intValue];
}

//一年的第几个月
- (NSInteger)yearMonth
{
    NSInteger year = [self year];
    NSInteger month = [self month];
    return  [[NSString stringWithFormat:@"%d%02d", (int)year, (int)month] intValue];
}
@end
